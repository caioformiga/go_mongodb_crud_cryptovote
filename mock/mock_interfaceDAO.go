// Code generated by MockGen. DO NOT EDIT.
// Source: /media/formiga/code/go_ws/src/github.com/caioformiga/go_mongodb_crud_cryptovote/interfaces/interfaceDAO.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	interfaces "github.com/caioformiga/go_mongodb_crud_cryptovote/interfaces"
	model "github.com/caioformiga/go_mongodb_crud_cryptovote/model"
	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
)

// MockInterfaceCryptoVoteDAO is a mock of InterfaceCryptoVoteDAO interface.
type MockInterfaceCryptoVoteDAO struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceCryptoVoteDAOMockRecorder
}

// MockInterfaceCryptoVoteDAOMockRecorder is the mock recorder for MockInterfaceCryptoVoteDAO.
type MockInterfaceCryptoVoteDAOMockRecorder struct {
	mock *MockInterfaceCryptoVoteDAO
}

// NewMockInterfaceCryptoVoteDAO creates a new mock instance.
func NewMockInterfaceCryptoVoteDAO(ctrl *gomock.Controller) *MockInterfaceCryptoVoteDAO {
	mock := &MockInterfaceCryptoVoteDAO{ctrl: ctrl}
	mock.recorder = &MockInterfaceCryptoVoteDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceCryptoVoteDAO) EXPECT() *MockInterfaceCryptoVoteDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInterfaceCryptoVoteDAO) Create(cryptoVote model.CryptoVote) (model.CryptoVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", cryptoVote)
	ret0, _ := ret[0].(model.CryptoVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInterfaceCryptoVoteDAOMockRecorder) Create(cryptoVote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInterfaceCryptoVoteDAO)(nil).Create), cryptoVote)
}

// DeleteMany mocks base method.
func (m *MockInterfaceCryptoVoteDAO) DeleteMany(filter bson.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMany", filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockInterfaceCryptoVoteDAOMockRecorder) DeleteMany(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockInterfaceCryptoVoteDAO)(nil).DeleteMany), filter)
}

// FindMany mocks base method.
func (m *MockInterfaceCryptoVoteDAO) FindMany(filter bson.M) ([]model.CryptoVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMany", filter)
	ret0, _ := ret[0].([]model.CryptoVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMany indicates an expected call of FindMany.
func (mr *MockInterfaceCryptoVoteDAOMockRecorder) FindMany(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMany", reflect.TypeOf((*MockInterfaceCryptoVoteDAO)(nil).FindMany), filter)
}

// FindManyLimitedSortedByField mocks base method.
func (m *MockInterfaceCryptoVoteDAO) FindManyLimitedSortedByField(filter bson.M, limit int64, sortFieldName string, orderType int) ([]model.CryptoVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindManyLimitedSortedByField", filter, limit, sortFieldName, orderType)
	ret0, _ := ret[0].([]model.CryptoVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindManyLimitedSortedByField indicates an expected call of FindManyLimitedSortedByField.
func (mr *MockInterfaceCryptoVoteDAOMockRecorder) FindManyLimitedSortedByField(filter, limit, sortFieldName, orderType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindManyLimitedSortedByField", reflect.TypeOf((*MockInterfaceCryptoVoteDAO)(nil).FindManyLimitedSortedByField), filter, limit, sortFieldName, orderType)
}

// FindOne mocks base method.
func (m *MockInterfaceCryptoVoteDAO) FindOne(filter bson.M) (model.CryptoVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", filter)
	ret0, _ := ret[0].(model.CryptoVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockInterfaceCryptoVoteDAOMockRecorder) FindOne(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockInterfaceCryptoVoteDAO)(nil).FindOne), filter)
}

// GetDbService mocks base method.
func (m *MockInterfaceCryptoVoteDAO) GetDbService() interfaces.InterfaceDbService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDbService")
	ret0, _ := ret[0].(interfaces.InterfaceDbService)
	return ret0
}

// GetDbService indicates an expected call of GetDbService.
func (mr *MockInterfaceCryptoVoteDAOMockRecorder) GetDbService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDbService", reflect.TypeOf((*MockInterfaceCryptoVoteDAO)(nil).GetDbService))
}

// SetDbService mocks base method.
func (m *MockInterfaceCryptoVoteDAO) SetDbService(dbService interfaces.InterfaceDbService) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDbService", dbService)
}

// SetDbService indicates an expected call of SetDbService.
func (mr *MockInterfaceCryptoVoteDAOMockRecorder) SetDbService(dbService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDbService", reflect.TypeOf((*MockInterfaceCryptoVoteDAO)(nil).SetDbService), dbService)
}

// UpdateOne mocks base method.
func (m *MockInterfaceCryptoVoteDAO) UpdateOne(filter, newData bson.M) (model.CryptoVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", filter, newData)
	ret0, _ := ret[0].(model.CryptoVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockInterfaceCryptoVoteDAOMockRecorder) UpdateOne(filter, newData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockInterfaceCryptoVoteDAO)(nil).UpdateOne), filter, newData)
}

// MockInterfaceDbService is a mock of InterfaceDbService interface.
type MockInterfaceDbService struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceDbServiceMockRecorder
}

// MockInterfaceDbServiceMockRecorder is the mock recorder for MockInterfaceDbService.
type MockInterfaceDbServiceMockRecorder struct {
	mock *MockInterfaceDbService
}

// NewMockInterfaceDbService creates a new mock instance.
func NewMockInterfaceDbService(ctrl *gomock.Controller) *MockInterfaceDbService {
	mock := &MockInterfaceDbService{ctrl: ctrl}
	mock.recorder = &MockInterfaceDbServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceDbService) EXPECT() *MockInterfaceDbServiceMockRecorder {
	return m.recorder
}

// GetCollectionName mocks base method.
func (m *MockInterfaceDbService) GetCollectionName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCollectionName indicates an expected call of GetCollectionName.
func (mr *MockInterfaceDbServiceMockRecorder) GetCollectionName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionName", reflect.TypeOf((*MockInterfaceDbService)(nil).GetCollectionName))
}

// GetDatabaseName mocks base method.
func (m *MockInterfaceDbService) GetDatabaseName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDatabaseName indicates an expected call of GetDatabaseName.
func (mr *MockInterfaceDbServiceMockRecorder) GetDatabaseName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseName", reflect.TypeOf((*MockInterfaceDbService)(nil).GetDatabaseName))
}

// GetDatabaseUri mocks base method.
func (m *MockInterfaceDbService) GetDatabaseUri() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseUri")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDatabaseUri indicates an expected call of GetDatabaseUri.
func (mr *MockInterfaceDbServiceMockRecorder) GetDatabaseUri() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseUri", reflect.TypeOf((*MockInterfaceDbService)(nil).GetDatabaseUri))
}

// SetCollectionName mocks base method.
func (m *MockInterfaceDbService) SetCollectionName(collection string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCollectionName", collection)
}

// SetCollectionName indicates an expected call of SetCollectionName.
func (mr *MockInterfaceDbServiceMockRecorder) SetCollectionName(collection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCollectionName", reflect.TypeOf((*MockInterfaceDbService)(nil).SetCollectionName), collection)
}

// SetDatabaseName mocks base method.
func (m *MockInterfaceDbService) SetDatabaseName(db string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDatabaseName", db)
}

// SetDatabaseName indicates an expected call of SetDatabaseName.
func (mr *MockInterfaceDbServiceMockRecorder) SetDatabaseName(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDatabaseName", reflect.TypeOf((*MockInterfaceDbService)(nil).SetDatabaseName), db)
}

// SetDatabaseUri mocks base method.
func (m *MockInterfaceDbService) SetDatabaseUri(uri string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDatabaseUri", uri)
}

// SetDatabaseUri indicates an expected call of SetDatabaseUri.
func (mr *MockInterfaceDbServiceMockRecorder) SetDatabaseUri(uri interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDatabaseUri", reflect.TypeOf((*MockInterfaceDbService)(nil).SetDatabaseUri), uri)
}
